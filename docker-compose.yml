services:
  backend:
    container_name: backend
    hostname: backend
    build:
      context: .
      dockerfile: ./Dockerfile
    volumes:
      - static:/var/services/web/static
      - media:/var/services/web/media
    depends_on:
      - db
      - migrations
    networks:
      - main
    command: /usr/local/bin/gunicorn --workers 1 --bind 0.0.0.0:8000 online_store.wsgi:application
    ports:
      - "8000:8000"
    environment:
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - POSTGRES_USERNAME=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_SERVICE_HOST=${POSTGRES_SERVICE_HOST}
      - POSTGRES_SERVICE_PORT=${POSTGRES_SERVICE_PORT}
    links:
      - db:db
  migrations:
    build:
      context: .
      dockerfile: ./Dockerfile
    depends_on:
      db:
        condition: service_healthy
    networks:
      - main
    command: python manage.py migrate --no-input
  db:
    image: postgres:16-alpine
    container_name: db
    hostname: db
    restart: always
    networks:
      - main
    ports:
      - "5432:5432"
    volumes:
      - postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_USERNAME=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d postgres -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
volumes:
  postgres:
  static:
  media:
networks:
  main:
    driver: bridge