# Используем базовый образ Python на основе Alpine - легковесной дистрибутивы Linux, которая делает образ меньше и быстрее.
FROM python:3.12-alpine

# Устанавливаем переменные окружения
ENV PYTHONUNBUFFERED=1 # Это гарантирует, что вывод будет отправляться сразу, а не буферизироваться.
ENV PYTHONDONTWRITEBYTECODE=1 # Это предотвращает создание файлов байт-кода Python в контейнере.

# Обновляем пакеты
RUN apk --update add

# Устанавливаем рабочую директорию внутри контейнера. Все последующие команды будут выполняться в этой директории.
WORKDIR /var/backend

# Копируем все файлы из текущей директории на хосте в рабочую директорию.
COPY . .

# Обновляем pip.
RUN pip install --upgrade pip

# Устанавливаем зависимости из файла requirements.txt.
RUN pip install --no-cache-dir -r requirements.txt #  Это предотвращает сохранение кэша pip, что уменьшает размер образа.

# Создаем непривилегированного пользователя и добавляем его в группу.
RUN addgroup -S -g 1000 user && adduser -S -u 1000 -D -G user user

# Изменяем владельца рабочей директории на пользователя "user" и группу "user".
RUN chown -R user:user /var/backend

# Переключаем контекст выполнения команд на "user". Все последующие команды будут выполняться от имени этого пользователя.
USER user

# Запускаем команду для сбора статических файлов Django.
RUN python manage.py collectstatic --no-input # --no-input предотвращает запросы ввода во время выполнения команды.

# Указываем, что контейнер будет использовать порт 8000.
EXPOSE 8000